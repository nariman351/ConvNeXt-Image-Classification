{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Part_d_feature_extraction","provenance":[{"file_id":"1V_SsZRzpwrhUTAhn7tXuKwhbnKoR15aE","timestamp":1648933339354},{"file_id":"1JMydR7Cs3IZaG3rkmVtBRiB7c3w9djZy","timestamp":1648931443727}],"collapsed_sections":[],"mount_file_id":"1R4R7_65JsNu9uMjPikDySh1Ge80bM38Q","authorship_tag":"ABX9TyP/+WG+HyK6anVNvUWNtGin"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"-VAVxPNTxdHo"},"outputs":[],"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","from torchvision import models\n","from numpy.lib.function_base import append\n","from sklearn.metrics import ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report, confusion_matrix\n","import matplotlib.pyplot as plt\n","import numpy as np"]},{"cell_type":"code","source":["transform = transforms.Compose([\n","    transforms.Resize(256),\n","    transforms.CenterCrop(224),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","])"],"metadata":{"id":"eQj2eJVxxsXL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(train_data, batch_size=4, shuffle=True, num_workers=2)\n","\n","test_data = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(test_data, batch_size=1, shuffle=False, num_workers=2)\n","\n","classes = ('Airplane', 'Car', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5hc1y07qxu6_","executionInfo":{"status":"ok","timestamp":1649364415923,"user_tz":240,"elapsed":2013,"user":{"displayName":"Nariman H","userId":"16525869975551128991"}},"outputId":"37942c04-2cb6-46ca-da5b-9830fc49caf4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","Files already downloaded and verified\n"]}]},{"cell_type":"code","source":["dataiter = iter(trainloader)\n","images, labels = dataiter.next()"],"metadata":{"id":"mtucpPyC1wpU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Now using the AlexNet\n","model = torch.hub.load('pytorch/vision:v0.11.0', 'alexnet', pretrained=True)\n","model.eval()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RHgApe8tx1-x","executionInfo":{"status":"ok","timestamp":1649364416918,"user_tz":240,"elapsed":998,"user":{"displayName":"Nariman H","userId":"16525869975551128991"}},"outputId":"cd6fcbfa-bd41-465c-b815-e90cf6184c82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Using cache found in /root/.cache/torch/hub/pytorch_vision_v0.11.0\n"]},{"output_type":"execute_result","data":{"text/plain":["AlexNet(\n","  (features): Sequential(\n","    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))\n","    (1): ReLU(inplace=True)\n","    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n","    (4): ReLU(inplace=True)\n","    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (7): ReLU(inplace=True)\n","    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (9): ReLU(inplace=True)\n","    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (11): ReLU(inplace=True)\n","    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))\n","  (classifier): Sequential(\n","    (0): Dropout(p=0.5, inplace=False)\n","    (1): Linear(in_features=9216, out_features=4096, bias=True)\n","    (2): ReLU(inplace=True)\n","    (3): Dropout(p=0.5, inplace=False)\n","    (4): Linear(in_features=4096, out_features=4096, bias=True)\n","    (5): ReLU(inplace=True)\n","    (6): Linear(in_features=4096, out_features=1000, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["for param in model.parameters():\n","    param.requires_grad = False"],"metadata":{"id":"1HRsUAfQzzSX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Removing layers after fc7\n","import torch.nn as nn\n","# https://stackoverflow.com/questions/51501828/how-to-extract-fc7-features-from-alexnet-in-pytorch-as-numpy-array\n","new_classifier = nn.Sequential(*list(model.classifier.children())[:-2])\n","model.classifier = new_classifier"],"metadata":{"id":"Dzf_dyXWzev7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.eval()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AKhqUzVgz4fj","executionInfo":{"status":"ok","timestamp":1649364416919,"user_tz":240,"elapsed":16,"user":{"displayName":"Nariman H","userId":"16525869975551128991"}},"outputId":"afa86c9d-e24b-4c09-8add-ed8a0022e678"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["AlexNet(\n","  (features): Sequential(\n","    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))\n","    (1): ReLU(inplace=True)\n","    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n","    (4): ReLU(inplace=True)\n","    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (7): ReLU(inplace=True)\n","    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (9): ReLU(inplace=True)\n","    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (11): ReLU(inplace=True)\n","    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))\n","  (classifier): Sequential(\n","    (0): Dropout(p=0.5, inplace=False)\n","    (1): Linear(in_features=9216, out_features=4096, bias=True)\n","    (2): ReLU(inplace=True)\n","    (3): Dropout(p=0.5, inplace=False)\n","    (4): Linear(in_features=4096, out_features=4096, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["model.named_modules()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"09pQ_lATxPsJ","executionInfo":{"status":"ok","timestamp":1649364416920,"user_tz":240,"elapsed":11,"user":{"displayName":"Nariman H","userId":"16525869975551128991"}},"outputId":"a9a5c64c-ac2f-4a2a-9589-6797c60b0825"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<generator object Module.named_modules at 0x7f4844eb37d0>"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["# move the input and model to GPU for speed if available\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0JvuFaTb1IWj","executionInfo":{"status":"ok","timestamp":1649364416920,"user_tz":240,"elapsed":7,"user":{"displayName":"Nariman H","userId":"16525869975551128991"}},"outputId":"e2ca81c4-56da-4d43-d1da-52c073ae8af6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda:0\n"]}]},{"cell_type":"code","source":["model.to(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_GlYtuUz2DXJ","executionInfo":{"status":"ok","timestamp":1649364427891,"user_tz":240,"elapsed":10976,"user":{"displayName":"Nariman H","userId":"16525869975551128991"}},"outputId":"bba1beb8-2343-4849-c4ba-e1b8a2dadb66"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["AlexNet(\n","  (features): Sequential(\n","    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))\n","    (1): ReLU(inplace=True)\n","    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n","    (4): ReLU(inplace=True)\n","    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (7): ReLU(inplace=True)\n","    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (9): ReLU(inplace=True)\n","    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (11): ReLU(inplace=True)\n","    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))\n","  (classifier): Sequential(\n","    (0): Dropout(p=0.5, inplace=False)\n","    (1): Linear(in_features=9216, out_features=4096, bias=True)\n","    (2): ReLU(inplace=True)\n","    (3): Dropout(p=0.5, inplace=False)\n","    (4): Linear(in_features=4096, out_features=4096, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["# Getting xtest, ytest from the model\n","xtest = []\n","ytest = []\n","\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data[0].to(device), data[1].to(device)\n","        ytest.append(labels)\n","        xtest.append(model(images))\n"],"metadata":{"id":"dtsdyA667SIJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Getting xtrain, ytrain from the model\n","xtrain = []\n","ytrain = []\n","\n","with torch.no_grad():\n","    for data in trainloader:\n","        images, labels = data[0].to(device), data[1].to(device)\n","        ytrain.append(labels)\n","        xtrain.append(model(images))"],"metadata":{"id":"4Juq_ybNShBr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Saving xtest, ytest to use in another file\n","torch.save(xtest, 'xtestfe7v2.pt')\n","torch.save(ytest, 'ytestfe7v2.pt')"],"metadata":{"id":"FA-ZPINe7Z-g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Saving xtrain, ytrain to use in another file\n","torch.save(xtrain, 'xtrainfe7v2.pt')\n","torch.save(ytrain, 'ytrainfe7v2.pt')"],"metadata":{"id":"B4qRGaPqT3zO"},"execution_count":null,"outputs":[]}]}